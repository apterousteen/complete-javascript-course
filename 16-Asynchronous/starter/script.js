'use strict';

const btn = document.querySelector('.btn-country');
const countriesContainer = document.querySelector('.countries');

///////////////////////////////////////

const renderCountry = (data, className = '') => {

    document.querySelectorAll('.error').forEach(x => x.remove());

    const html = `
            <article class="country ${className}">
                <img class="country__img" src="${data.flags.png}"/>
                <div class="country__data">
                    <h3 class="country__name">${data.name.common}</h3>
                    <h4 class="country__region">${data.region}</h4>
                    <p class="country__row"><span>üë´</span>${Math.round(+data.population / 1e6)}M people</p>
                    <p class="country__row"><span>üó£Ô∏è</span>${Object.values(data.languages)[0]}</p>
                    <p class="country__row"><span>üí∞</span>${Object.values(data.currencies)[0].name}, ${Object.values(data.currencies)[0].symbol}</p>
                </div>
            </article>`

    countriesContainer.insertAdjacentHTML('beforeend', html);
    console.log(data);
}


const renderError = (msg) => {
    const html = `<div class="error">${msg}</div>`;
    countriesContainer.insertAdjacentHTML('beforeend', html);
};

/*
// XMLHttpRequest
const getCountryAndNeighbours = (countryName) => {
    const request = new XMLHttpRequest();
    request.open('GET', `https://restcountries.com/v3.1/name/${countryName}`);
    request.send();
    request.addEventListener('load', () => {
        const [data] = JSON.parse(request.responseText);
        console.log(data);

        renderCountry(data);

        const neighbour = data.borders?.at(0) || null;
        if (!neighbour) return;

        // get neighbour
        const request2 = new XMLHttpRequest();
        request2.open('GET', `https://restcountries.com/v3.1/alpha/${neighbour}`);
        request2.send();
        request2.addEventListener('load', () => {
            const [data] = JSON.parse(request2.responseText);
            console.log(data);

            renderCountry(data, 'neighbour');
        });
    });
};
getCountryAndNeighbours('usa');

// Promises
// –ö–æ–¥ –±–µ–∑ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏
const getCountryDataSimple = (countryName) => {
    // Country 1
    fetch(`https://restcountries.com/v3.1/name/${countryName}`)
        .then(response => {
            console.log(response);

            if (!response.ok)
                throw new Error(`Country not found (${response.status})`);

            return response.json();
        })
        .then(data => {
            renderCountry(data[0]);
            const neighbour = data[0].borders?.at(0) || null;
            if (!neighbour) return;

            // Country 2
            return fetch(`https://restcountries.com/v3.1/alpha/${neighbour}`);
        })
        .then(response => response.json())
        .then(dataNeighbour => renderCountry(dataNeighbour[0], 'neighbour'))
        .catch(err => {
            console.error(`‚ùó ${err}`);
            renderError(`‚ùóSomething went wrong: ${err.message}. Try again!`);
        })
        .finally(() => countriesContainer.style.opacity = '1')
    ;
};

*/
// –° —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º
const getJSON = (url, errMsg) => {
    return fetch(url)
        .then(response => {
            if (!response.ok)
                throw new Error(`${errMsg} (${response.status})`);

            return response.json();
        });
};
/*
const getCountryDataSimple = (countryName) => {
    // Country 1
    getJSON(`https://restcountries.com/v3.1/name/${countryName}`, 'Country not found')
        .then(data => {
            renderCountry(data[0]);
            const neighbour = data[0].borders?.at(0) || null;

            if (!neighbour)
                throw new Error('No neighbour found');

            // Country 2
            return getJSON(`https://restcountries.com/v3.1/alpha/${neighbour}`, 'Country not found');
        })
        .then(dataNeighbour => renderCountry(dataNeighbour[0], 'neighbour'))
        .catch(err => {
            console.error(`‚ùó${err}`);
            renderError(`‚ùóSomething went wrong: ${err.message}. Try again!`);
        })
        .finally(() => countriesContainer.style.opacity = '1')
    ;
};

btn.addEventListener('click', function () {
    getCountryDataSimple('italy');
});
 */


// Building a Simple Promise
// –õ–æ—Ç–æ—Ä–µ—è —Å –ø—Ä–æ–º–∏—Å–∞–º–∏
// const lotteryPromise = new Promise((resolve, reject) => {
//     console.log('Lottery draw is happening üîÆ');
//     setTimeout(() => {
//         if (Math.random() >= 0.5) {
//             resolve('You WIN üí∞');
//         } else {
//             reject(new Error('You lost your money üí©'));
//         }
//     }, 2000);
// });
//
// lotteryPromise
//     .then(res => console.log(res))
//     .catch(err => console.error(err));
//
// // –¢–∞–π–º–µ—Ä —Å –ø–æ–º–æ—â—å—é –ø—Ä–æ–º–∏—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ setTimeout
// const sleep = (seconds) => {
//     return new Promise((resolve) => {
//         setTimeout(resolve, seconds * 1000);
//     });
// };
//
// sleep(5)
//     .then(() => {
//         // —Å—é–¥–∞ –∫–æ–¥ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤ 5 —Å–µ–∫—É–Ω–¥
//         console.log('5 seconds passed');
//
//         // –º–æ–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è, –∞ –º–æ–∂–Ω–æ –µ—â–µ –æ–¥–∏–Ω —Ç–∞–π–º–µ—Ä –∑–∞–ø—É—Å—Ç–∏—Ç—å
//         return sleep(2);
//     })
//     .then(() => {
//         // —Å—é–¥–∞ –∫–æ–¥ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤ 5 + 2 —Å–µ–∫—É–Ω–¥—ã
//         console.log('7 seconds passed')
//     });

// —Ç–æ –∂–µ —Å–∞–º–æ–µ —Å –ø–æ–º–æ—â—å—é –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç–∞–π–º–∞—É—Ç–æ–≤
/*
setTimeout(() => {
// —Å—é–¥–∞ –∫–æ–¥ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤ 5 —Å–µ–∫—É–Ω–¥
    console.log('5 seconds passed');

    // –º–æ–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è, –∞ –º–æ–∂–Ω–æ –µ—â–µ –æ–¥–∏–Ω —Ç–∞–π–º–µ—Ä –∑–∞–ø—É—Å—Ç–∏—Ç—å
    setTimeout(() => {
        // —Å—é–¥–∞ –∫–æ–¥ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤ 5 + 2 —Å–µ–∫—É–Ω–¥—ã
        console.log('7 seconds passed')
    }, 2000)
}, 5000)
*/


// —Ç–∞–π–º–µ—Ä –≤ —Ü–∏–∫–ª–µ —Å –ø–æ–º–æ—â—å—é async/await
/*
const sleep2 = (sec) => new Promise(resolve => setTimeout(resolve, sec * 1000))

async function loopTimer() {
    for (let i = 0; i < 3; i++) {
        console.log(i);
        await sleep2(3000);
    }
}

loopTimer();
*/

// –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª–Ω—è—é—â–∏–µ—Å—è –ø—Ä–æ–º–∏—Å—ã
// Promise.resolve('abc').then((res) => console.log(res));
// Promise.reject(new Error('abc')).catch((err) => console.error(err));

// –ü—Ä–æ–º–∏—Å–∏—Ñ–∏–∫–∞—Ü–∏—è Geolocation API

const getGeolocationCallbacks = () => {
    return navigator.geolocation.getCurrentPosition(
        position => console.log(position),
        error => console.error(error)
    );
};

const getGeolocationPromise = () => {
    return new Promise((resolve, reject) =>
        navigator.geolocation.getCurrentPosition(
            position => resolve(position),
            error => reject(error)
        )
    )
};

// –≤ getCurrentPosition 1 –∫–æ–ª–ª–±–µ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏, 2 - –æ—à–∏–±–∫—É,
// —Ç–∞–∫ —á—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –≤—ã–∑–≤–∞—Ç—å resolve, reject, –≤ –Ω–∏—Ö –ø–µ—Ä–µ–¥–∞–¥—É—Ç—Å—è –Ω—É–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
const getGeolocationPromiseSimple = () => {
    return new Promise((resolve, reject) =>
        navigator.geolocation.getCurrentPosition(resolve, reject));
};

//
// getGeolocationPromiseSimple()
//     .then(res => console.log(res))
//     .catch(err => console.error(err));

// async/await
//
// —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–π —Å–∞—Ö–∞—Ä –¥–ª—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ .then
//
// async –¥–µ–ª–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π, —Ç–µ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —Ñ–æ–Ω–µ, –∞ –∫–æ–≥–¥–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è, –≤–µ—Ä–Ω–µ—Ç –ø—Ä–æ–º–∏—Å
// await –ø–∏—à–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –ø—Ä–æ–º–∏—Å–æ–º –≤–Ω—É—Ç—Ä–∏ async —Ñ-—Ü–∏–∏, –∏ –æ–Ω –∂–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–æ–≥–æ –ø—Ä–æ–º–∏—Å–∞
// –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –í–ù–£–¢–†–ò –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ-—Ü–∏–∏, —Ç–∞–∫ —á—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ —Ç–æ—Ä–º–æ–∑–∏—Ç—å—Å—è –Ω–µ –±—É–¥–µ—Ç
const whereAmI = async function () {
    try {
        // Geolocation
        const position = await getGeolocationPromiseSimple();
        let {latitude, longitude} = position.coords;

        // Reverse geocoding
        const responseGeo = await fetch(`https://geocode.xyz/${latitude},${longitude}?geoit=json&auth=566423760144526357706x56778`);

        if (!responseGeo.ok)
            throw new Error(`Geo API Error (${responseGeo.status})`);

        const dataGeo = await responseGeo.json();

        // Country Data
        const responseCountry = await fetch(`https://restcountries.com/v3.1/name/${dataGeo.country}`);

        if (!responseCountry.ok)
            throw new Error(`Country API Error (${responseCountry.status})`);

        const dataCountry = await responseCountry.json();
        renderCountry(dataCountry[0]);
        console.log('Rest Countries API');
        console.log(responseCountry);
        console.log(dataCountry[0]);
    } catch (e) {
        console.log(e.message);
        renderError(`‚ùóSomething went wrong: ${e.message}.`);
    } finally {
        countriesContainer.style.opacity = '1';
    }
};

btn.addEventListener('click', whereAmI);

const get3Capitals = async function (c1, c2, c3) {
    try {
        // –∑–∞–ø—Ä–æ—Å—ã –∏–¥—É—Ç –¥—Ä—É–≥ –∑–∞ –¥—Ä—É–≥–æ–º
        // const [data1] = await getJSON(`https://restcountries.com/v3.1/name/${c1}`, 'Country API Error');
        // const [data2] = await getJSON(`https://restcountries.com/v3.1/name/${c2}`, 'Country API Error');
        // const [data3] = await getJSON(`https://restcountries.com/v3.1/name/${c3}`, 'Country API Error');

        // console.log([data1.capital[0], data2.capital[0], data3.capital[0]]);

        // –∑–∞–ø—Ä–æ—Å—ã –∏–¥—É—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        // —Ä–∞–∑—Ä–µ—à–∏—Ç—Å—è, –∫–æ–≥–¥–∞ –≤—Å–µ –ø—Ä–æ–º–∏—Å—ã –≤–µ—Ä–Ω—É—Ç—Å—è
        // Promise.all –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è iterable
        const data = await Promise.all([
            getJSON(`https://restcountries.com/v3.1/name/${c1}`, 'Country API Error'),
            getJSON(`https://restcountries.com/v3.1/name/${c2}`, 'Country API Error'),
            getJSON(`https://restcountries.com/v3.1/name/${c3}`, 'Country API Error'),
        ]);

        console.log(data.map(d => d[0].capital[0]));

    } catch (e) {
        console.error(e.message);
    }
};

// get3Capitals('USA', 'Thailand', 'Russia');

// Promise.race
// –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–∏—Å
// –ø—Ä–∏–Ω–∏–º–∞–µ—Ç iterable
// –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ

(async function (c1, c2, c3) {
    const data = await Promise.race([
        getJSON(`https://restcountries.com/v3.1/name/${c1}`, 'Country API Error'),
        getJSON(`https://restcountries.com/v3.1/name/${c2}`, 'Country API Error'),
        getJSON(`https://restcountries.com/v3.1/name/${c3}`, 'Country API Error'),
    ]);

    console.log(data[0].capital[0]);
})('USA', 'Thailand', 'Russia');

// –ü–æ–ª–µ–∑–µ–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å —Ç–∞–π–º–∞—É—Ç
const timeout = (seconds) => {
    return new Promise((_, reject) => {
        setTimeout(() => {
            reject(new Error('Timeout Error'));
        }, seconds * 1000)
    });
};

Promise.race([
    getJSON(`https://restcountries.com/v3.1/name/italy`, 'Country API Error'),
    getJSON(`https://restcountries.com/v3.1/name/japan`, 'Country API Error'),
    getJSON(`https://restcountries.com/v3.1/name/poland`, 'Country API Error'),
    timeout(1),
])
    .then(res => console.log(res[0].capital[0]))
    .catch(err => console.error(err.message));


// –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç Promise.all, –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–æ–º–∏—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω
Promise.allSettled([
    Promise.resolve('Success'),
    Promise.reject('Error'),
    Promise.resolve('Success'),
])
    .then(res => console.log(res)) // res - –º–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–º–∏—Å–æ–≤
    .catch(err => console.error(err.message));

// Promise.any - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
Promise.any([
    Promise.reject('Error'),
    Promise.resolve('Success1'),
    Promise.resolve('Success2'),
])
    .then(res => console.log(res));
